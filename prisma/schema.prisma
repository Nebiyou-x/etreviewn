generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model User {
  id            String    @id @default(uuid())
  createdAt     DateTime
  updatedAt     DateTime
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
  reviews       Review[]
  reviewLikes   ReviewLike[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  createdAt             DateTime
  updatedAt             DateTime
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Verification {
  id         String    @id @default(uuid())
  createdAt  DateTime?
  updatedAt  DateTime?
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model Genre {
  id     String   @id @default(uuid())
  name   String   @unique
  slug   String   @unique
  movies Movie[]  @relation("MovieGenres")
}

model Movie {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String
  director    String?
  releaseYear Int?
  imageUrl    String?
  watchUrl    String? // Link to watch the movie
  reviews     Review[]
  genres      Genre[] @relation("MovieGenres")
}

model Review {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int?     // 1-5, only for ratings (no comment)
  comment   String?  // Only for reviews (no rating)
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  likes     ReviewLike[]
  isRatingOnly Boolean @default(false) // true for ratings, false for reviews
  // Enforce at the application level: either rating or comment, not both
}

model ReviewLike {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([reviewId, userId])
}

model News {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  author    String
  imageUrl  String?
  tags      String[]
}
